// Generated by CoffeeScript 1.10.0
var App, Kefir, KefirBus, React, ReactDOM, _window_width$, changeWindowWidth, electron, fs, getWindowWidth, ipcRenderer, ranges, window_width$;

React = require('react');

ReactDOM = require('react-dom');

electron = require('electron');

ipcRenderer = electron.ipcRenderer;

fs = require('fs');

Kefir = require('kefir');

KefirBus = require('kefir-bus');

ipcRenderer.send('ready', true);

getWindowWidth = function() {
  var ref;
  return ((ref = electron.remote.BrowserWindow.getFocusedWindow()) != null ? ref.getSize()[0] : void 0) || 300;
};

_window_width$ = KefirBus();

changeWindowWidth = function(e) {
  return _window_width$.emit(true);
};

window_width$ = _window_width$.debounce(100).map(getWindowWidth);

window.addEventListener('resize', changeWindowWidth);

App = React.createClass({displayName: "App",
  getInitialState: function() {
    return {
      body: '',
      opacity: 90,
      font_size: 12,
      width: 300,
      window_width: getWindowWidth(),
      saved: true,
      inverted: false,
      filename: null
    };
  },
  readFile: function() {
    var e, error;
    if (this.state.filename != null) {
      try {
        return this.setState({
          body: fs.readFileSync(this.state.filename, 'utf8')
        });
      } catch (error) {
        e = error;
        return alert("Can't open file " + this.state.filename + ": " + e);
      }
    }
  },
  componentDidMount: function() {
    this.readFile();
    ipcRenderer.on('file-open', (function(_this) {
      return function(event, filename) {
        return _this.setState({
          filename: filename
        }, _this.readFile.bind(_this));
      };
    })(this));
    ipcRenderer.on('file-saveas', (function(_this) {
      return function(event, filename) {
        return _this.setState({
          filename: filename
        }, function() {
          fs.writeFileSync(_this.state.filename, _this.state.body);
          return _this.setState({
            saved: true
          });
        });
      };
    })(this));
    ipcRenderer.on('file-save', (function(_this) {
      return function() {
        fs.writeFileSync(_this.state.filename, _this.state.body);
        return _this.setState({
          saved: true
        });
      };
    })(this));
    ipcRenderer.on('file-invert', this.invert);
    window_width$.onValue(this.setWindowWidth);
    return changeWindowWidth();
  },
  invert: function() {
    return this.setState({
      inverted: !this.state.inverted
    });
  },
  setWindowWidth: function(window_width) {
    return this.setState({
      window_width: window_width
    });
  },
  changeBody: function(e) {
    return this.setState({
      body: e.target.value,
      saved: false
    });
  },
  openRange: function(range) {
    return (function(_this) {
      return function() {
        return _this.setState({
          range: range
        });
      };
    })(this);
  },
  closeRange: function() {
    return this.setState({
      range: null
    });
  },
  changeRange: function(range) {
    return (function(_this) {
      return function(e) {
        var change;
        change = {};
        change[range] = e.target.value;
        return _this.setState(change);
      };
    })(this);
  },
  renderRange: function(range) {
    var max, min, ref;
    ref = ranges[range], min = ref.min, max = ref.max;
    if (typeof min === 'function') {
      min = min(this.state);
    }
    if (typeof max === 'function') {
      max = max(this.state);
    }
    return React.createElement("input", {
      "type": 'range',
      "min": min,
      "max": max,
      "value": this.state[range],
      "onChange": this.changeRange(range)
    });
  },
  render: function() {
    return React.createElement("div", {
      "className": 'container' + (this.state.inverted ? ' inverted' : ''),
      "style": {
        opacity: this.state.opacity / 100
      }
    }, React.createElement("div", {
      "className": 'title-bar'
    }, React.createElement("div", {
      "className": 'filename'
    }, this.state.filename || 'untitled', " ", (this.state.saved ? '' : '*')), (this.state.window_width > 300 ? this.state.range ? React.createElement("div", {
      "className": 'ranges'
    }, this.renderRange(this.state.range), React.createElement("a", {
      "onClick": this.closeRange
    }, React.createElement("i", {
      "className": 'fa fa-times-circle'
    }))) : React.createElement("div", {
      "className": 'ranges'
    }, React.createElement("a", {
      "onClick": this.openRange('font_size')
    }, React.createElement("i", {
      "className": 'fa fa-font'
    })), React.createElement("a", {
      "onClick": this.openRange('opacity')
    }, React.createElement("i", {
      "className": 'fa fa-adjust'
    })), React.createElement("a", {
      "onClick": this.openRange('width')
    }, React.createElement("i", {
      "className": 'fa fa-compress'
    })), React.createElement("a", {
      "onClick": this.invert
    }, React.createElement("i", {
      "className": 'fa fa-' + (this.state.inverted ? 'circle-o' : 'circle')
    }))) : void 0)), React.createElement("textarea", {
      "value": this.state.body,
      "onChange": this.changeBody,
      "style": {
        maxWidth: this.state.width + 'px',
        fontSize: this.state.font_size
      }
    }));
  }
});

ranges = {
  width: {
    min: 300,
    max: function(arg) {
      var window_width;
      window_width = arg.window_width;
      return window_width;
    }
  },
  opacity: {
    min: 40,
    max: 100
  },
  font_size: {
    min: 5,
    max: 100
  }
};

ReactDOM.render(React.createElement(App, null), document.getElementById('app'));

// Generated by CoffeeScript 1.10.0
var App, React, ReactDOM, fs, ipcRenderer;

React = require('react');

ReactDOM = require('react-dom');

ipcRenderer = require('electron').ipcRenderer;

fs = require('fs');

ipcRenderer.send('ready', true);

App = React.createClass({displayName: "App",
  getInitialState: function() {
    return {
      body: '',
      opacity: 100,
      saved: true,
      inverted: false,
      editing_filename: false,
      filename: null
    };
  },
  readFile: function() {
    var e, error;
    if (this.state.filename != null) {
      try {
        return this.setState({
          body: fs.readFileSync(this.state.filename, 'utf8')
        });
      } catch (error) {
        e = error;
        return alert("Can't open file " + this.state.filename + ": " + e);
      }
    }
  },
  componentDidMount: function() {
    this.readFile();
    ipcRenderer.on('file-open', (function(_this) {
      return function(event, filename) {
        return _this.setState({
          filename: filename
        }, _this.readFile.bind(_this));
      };
    })(this));
    ipcRenderer.on('file-save', (function(_this) {
      return function() {
        fs.writeFileSync(_this.state.filename, _this.state.body);
        return _this.setState({
          saved: true
        });
      };
    })(this));
    return ipcRenderer.on('file-invert', (function(_this) {
      return function() {
        return _this.setState({
          inverted: !_this.state.inverted
        });
      };
    })(this));
  },
  changeBody: function(e) {
    return this.setState({
      body: e.target.value,
      saved: false
    });
  },
  changeOpacity: function(e) {
    return this.setState({
      opacity: e.target.value
    });
  },
  editFilename: function() {
    return this.setState({
      editing_filename: true
    }, (function(_this) {
      return function() {
        return _this.refs.filename.focus();
      };
    })(this));
  },
  changeFilename: function(e) {
    return this.setState({
      filename: e.target.value
    });
  },
  onKeyDown: function(e) {
    if (e.key === 'Enter') {
      return this.setState({
        editing_filename: false,
        saved: false
      });
    }
  },
  render: function() {
    return React.createElement("div", {
      "className": 'container' + (this.state.inverted ? ' inverted' : ''),
      "style": {
        opacity: this.state.opacity / 100
      }
    }, React.createElement("div", {
      "className": 'title-bar'
    }, (this.state.editing_filename ? React.createElement("input", {
      "ref": 'filename',
      "type": 'text',
      "className": 'filename',
      "onChange": this.changeFilename,
      "onKeyDown": this.onKeyDown,
      "value": this.state.filename
    }) : React.createElement("div", {
      "className": 'filename',
      "onDoubleClick": this.editFilename
    }, this.state.filename || 'untitled', " ", (this.state.saved ? '' : '*'))), React.createElement("input", {
      "type": 'range',
      "min": 40,
      "max": 100,
      "value": this.state.opacity,
      "onChange": this.changeOpacity
    })), React.createElement("textarea", {
      "value": this.state.body,
      "onChange": this.changeBody
    }));
  }
});

ReactDOM.render(React.createElement(App, null), document.getElementById('app'));
